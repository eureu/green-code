import type { ZoomRange } from "../../common/types";
import { YMapComplexEntity } from "../YMapEnities";
import { Context } from "../Entities";
interface YMapCoverageProps {
    onError?: (e: Error) => void;
}
export interface CoverageContext {
    subscribe(args: CoverageSubscriptionArgs): CoverageSubscription;
}
export declare const CoverageContext: Context<CoverageContext>;
/**
 * The component of loading data on copyrights on the map and the zoom range for
 * the area where the center of the map is located
 */
declare class YMapCoverage extends YMapComplexEntity<YMapCoverageProps, {}> {
    private _abortController?;
    private _coverageArgs?;
    private _subscriptions;
    private readonly _queueRequest;
    private readonly _queueRequestStamps;
    private _stampsRequestsInterval?;
    private _currentIntervalMs;
    private _stampsAbortController?;
    constructor(props?: YMapCoverageProps);
    subscribe(args: CoverageSubscriptionArgs): CoverageSubscription;
    protected _onAttach(): void;
    protected _onDetach(): void;
    protected _scheduleStampsRequests(): void;
    private _onMapContextChange;
    private _request;
    _requestStamps(): void;
}
export interface CoverageSubscriptionArgs {
    layer: string;
    maptype: string | undefined;
    versioned?: {
        interval: number;
    };
    onUpdate: () => void;
}
export declare class CoverageSubscription {
    private readonly _onDestroy;
    readonly layer: string;
    readonly maptype: string | undefined;
    readonly onUpdate: () => void;
    readonly versioned?: {
        interval: number;
    };
    copyrights?: string[];
    zoomRange?: ZoomRange;
    version?: string;
    constructor(args: CoverageSubscriptionArgs, _onDestroy: () => void);
    destroy(): void;
}
export { YMapCoverage, YMapCoverageProps };
